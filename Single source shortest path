#include <iostream>
#include <list>
#include <unordered_map>
#include <queue>
using namespace std;
#define pb push_back
template <typename T>
class graph {
  unordered_map<T, list<T>> h;

public:
  void addedge(T u, T v, bool bidir = true) {
    h[u].pb(v);
    if (bidir) {
      h[v].pb(u);
    }
  }

  void printgraph() {
    for (auto x : h) {
      cout << x.first << "-->";
      for (auto p : x.second) {
        cout << p << ", ";
      }
      cout << endl;
    }
  }

  void singlesourceshortestpath(T src) {
    queue<T> q;
    unordered_map<T, bool> visited;
    unordered_map<T, bool> distance;
    
    distance[src] = 0;

    q.push(src);
    visited[src] = true;

    while (!q.empty()) {
      T p = q.front();
    //   cout << p << " ";
      q.pop();

      for (T x : h[p]) {
        if (!visited[x]) {
          q.push(x);
          visited[x] = true;
          distance[x] = distance[p]+1;
        }
      }
    }
    for(auto x: distance){
        cout<<"distance from "<<src<<" to "<<x.first<<" to "<<x.second;
        cout<<endl;
    }
  }
  
  
  
};

int main() {
  graph<string> g;
  g.addedge("trump", "modi", true);
  g.addedge("putin", "trump");
  g.addedge("putin", "modi");
  g.addedge("putin", "pope");
  g.addedge("prabhu", "modi");
  g.addedge("modi", "yogi", true);
  g.addedge("yogi", "prabhu");

//   cout << "BFS starting from 'trump':" << endl;
//   g.bfs("trump");
//   cout << endl;

//   cout << "BFS starting from 'yogi':" << endl;
//   g.bfs("yogi");
//   cout << endl;
    g.singlesourceshortestpath("trump");

  return 0;
}
