#include <iostream>
#include <vector>
using namespace std;

// Recursive Approach (Minimum Steps to 1)
int recursionMinStepsTo1(int n) {
    // Base case
    if (n == 1) {
        return 0;
    }

    // Recursive case
    int steps = INT_MAX;
    int step1 = recursionMinStepsTo1(n - 1);

    if (n % 2 == 0) {
        int step2 = recursionMinStepsTo1(n / 2);
        steps = min(steps, step2);
    }

    if (n % 3 == 0) {
        int step3 = recursionMinStepsTo1(n / 3);
        steps = min(steps, step3);
    }

    return steps + 1;
}

// Top-Down Approach (Minimum Steps to 1)
int memo[1000]; // Memoization table

int topDownMinStepsTo1(int n) {
    // Base case
    if (n == 1) {
        return 0;
    }

    // Check if result already exists in the memoization table
    if (memo[n] != -1) {
        return memo[n];
    }

    // Recursive case
    int steps = INT_MAX;
    int step1 = topDownMinStepsTo1(n - 1);

    if (n % 2 == 0) {
        int step2 = topDownMinStepsTo1(n / 2);
        steps = min(steps, step2);
    }

    if (n % 3 == 0) {
        int step3 = topDownMinStepsTo1(n / 3);
        steps = min(steps, step3);
    }

    // Store the result in the memoization table and return
    return memo[n] = steps + 1;
}

// Bottom-Up Approach (Minimum Steps to 1)
int bottomUpMinStepsTo1(int n) {
    vector<int> dp(n + 1, INT_MAX);
    dp[1] = 0;

    for (int i = 2; i <= n; ++i) {
        dp[i] = dp[i - 1] + 1;

        if (i % 2 == 0) {
            dp[i] = min(dp[i], dp[i / 2] + 1);
        }

        if (i % 3 == 0) {
            dp[i] = min(dp[i], dp[i / 3] + 1);
        }
    }

    return dp[n];
}

int main() {
    int n;
    cout << "Enter a number: ";
    cin >> n;

    // Initialize memoization table for the top-down approach
    for (int i = 0; i <= n; ++i) {
        memo[i] = -1;
    }

    int resultRecursion = recursionMinStepsTo1(n);
    int resultTopDown = topDownMinStepsTo1(n);
    int resultBottomUp = bottomUpMinStepsTo1(n);

    cout << "Minimum steps to reach 1 (Recursive): " << resultRecursion << endl;
    cout << "Minimum steps to reach 1 (Top-Down): " << resultTopDown << endl;
    cout << "Minimum steps to reach 1 (Bottom-Up): " << resultBottomUp << endl;

    return 0;
}
