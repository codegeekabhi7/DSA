#include <iostream>
#include <climits>

using namespace std;

// Recursive approach
int maxprofitRecursive(int *price, int l, int r, int day) {
    // Base case
    if (l > r) {
        return 0;
    }

    // Recursive case
    int op1 = price[l] * day + maxprofitRecursive(price, l + 1, r, day + 1);
    int op2 = price[r] * day + maxprofitRecursive(price, l, r - 1, day + 1);

    return max(op1, op2);
}

// Top-down dynamic programming (memoization)
int dp[100][100];

int maxprofitMemoization(int *price, int l, int r, int day) {
    // Base case
    if (l > r) {
        return 0;
    }

    // If the result is already computed, return it
    if (dp[l][r] != -1) {
        return dp[l][r];
    }

    // Recursive case
    int op1 = price[l] * day + maxprofitMemoization(price, l + 1, r, day + 1);
    int op2 = price[r] * day + maxprofitMemoization(price, l, r - 1, day + 1);

    // Store the result in the memoization table
    dp[l][r] = max(op1, op2);

    return dp[l][r];
}

// Bottom-up dynamic programming (tabulation)
int maxprofitTabulation(int *price, int n) {
    int dp[n][n];

    for (int i = 0; i < n; i++) {
        dp[i][i] = price[i] * (n - i);
    }

    for (int len = 2; len <= n; len++) {
        for (int i = 0; i <= n - len; i++) {
            int j = i + len - 1;
            int day = n - (j - i);
            dp[i][j] = max(price[i] * day + dp[i + 1][j], price[j] * day + dp[i][j - 1]);
        }
    }

    return dp[0][n - 1];
}

int main() {
    int price[] = {2, 3, 5, 1, 4};
    int n = sizeof(price) / sizeof(int);

    // Recursive approach
    int profitRecursive = maxprofitRecursive(price, 0, n - 1, 1);
    cout << "Maximum profit (Recursive): " << profitRecursive << endl;

    // Top-down dynamic programming (memoization)
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            dp[i][j] = -1;
        }
    }
    int profitMemoization = maxprofitMemoization(price, 0, n - 1, 1);
    cout << "Maximum profit (Memoization): " << profitMemoization << endl;

    // Bottom-up dynamic programming (tabulation)
    int profitTabulation = maxprofitTabulation(price, n);
    cout << "Maximum profit (Tabulation): " << profitTabulation << endl;

    return 0;
}
