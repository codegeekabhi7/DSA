#include <iostream>
#include <vector>
using namespace std;

class maxheap {
private:
    vector<int> v;

    void heapify(int index) {
        int maxindex = index;
        int lci = 2 * index;
        int rci = lci + 1;

        if (lci < v.size() && v[lci] > v[maxindex]) {
            maxindex = lci;
        }

        if (rci < v.size() && v[rci] > v[maxindex]) {
            maxindex = rci;
        }

        if (index != maxindex) {
            swap(v[maxindex], v[index]);
            heapify(maxindex);
        }
    }

public:
    maxheap() {
        v.push_back(-1); // You can start the heap from index 1 for easier calculations.
    }

    void push(int d) {
        v.push_back(d);
        int child = v.size() - 1;
        int parent = child / 2;

        while (child > 1 && v[parent] < v[child]) {
            swap(v[parent], v[child]);
            child = parent;
            parent = child / 2;
        }
    }

    void pop() {
        if (v.size() <= 1) {
            cout << "Heap is empty." << endl;
            return;
        }

        swap(v[1], v[v.size() - 1]);
        v.pop_back();
        heapify(1);
    }

    int size() {
        return v.size() - 1; // Subtract 1 for the dummy element at index 0.
    }

    int top() {
        if (v.size() <= 1) {
            cout << "Heap is empty." << endl;
            return -1; // You can return a default value or handle this case differently.
        }
        return v[1];
    }

    bool isempty() {
        return v.size() <= 1; // Heap is empty if there are no elements except the dummy element.
    }
};

int main() {
    maxheap mh;

    mh.push(3);
    mh.push(2);
    mh.push(1);
    mh.push(4);

    cout << "Top element: " << mh.top() << endl; // Should print 4

    mh.pop();
    cout << "Top element after pop: " << mh.top() << endl; // Should print 3

    return 0;
}
