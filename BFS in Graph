#include <iostream>
#include <list>
#include <unordered_map>
#include <queue>
using namespace std;

template <typename T>
class graph {
  unordered_map<T, list<T>> h;

public:
  void addedge(T u, T v, bool bidir = true) {
    h[u].push_back(v);
    if (bidir) {
      h[v].push_back(u);
    }
  }

  void printgraph() {
    for (auto x : h) {
      cout << x.first << "-->";
      for (auto p : x.second) {
        cout << p << ", ";
      }
      cout << endl;
    }
  }

  void bfs(T src) {
    queue<T> q;
    unordered_map<T, bool> visited;

    q.push(src);
    visited[src] = true;

    while (!q.empty()) {
      T node = q.front();
      cout << node << " ";
      q.pop();

      for (T neighbor : h[node]) {
        if (!visited[neighbor]) {
          q.push(neighbor);
          visited[neighbor] = true;
        }
      }
    }
  }
};

int main() {
  graph<string> g;
  g.addedge("trump", "modi", true);
  g.addedge("putin", "trump");
  g.addedge("putin", "modi");
  g.addedge("putin", "pope");
  g.addedge("prabhu", "modi");
  g.addedge("modi", "yogi", true);
  g.addedge("yogi", "prabhu");

  cout << "BFS starting from 'trump':" << endl;
  g.bfs("trump");
  cout << endl;

  cout << "BFS starting from 'yogi':" << endl;
  g.bfs("yogi");
  cout << endl;

  return 0;
}
