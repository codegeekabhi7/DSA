#include <iostream>
#include <list>
#include <unordered_map>
#include <queue>
using namespace std;

template <typename T>
class graph {
    unordered_map<T, list<T>> h;

public:
    void addedge(T u, T v, bool bidir = false) {
        h[u].push_back(v);
        if (bidir) {
            h[v].push_back(u);
        }
    }

    void dfs(T src, unordered_map<T, bool>& visited) {
        cout << src << " ";
        visited[src] = true;
        for (auto x : h[src]) {
            if (!visited[x]) {
                dfs(x, visited);
            }
        }
    }

    void printgraph() {
        for (auto x : h) {
            cout << x.first << "-->";
            for (auto p : x.second) {
                cout << p << ", ";
            }
            cout << endl;
        }
    }
};

int main() {

    graph<int> g;
    g.addedge(0, 1);
    g.addedge(0, 4);
    g.addedge(1, 4);
    g.addedge(1, 4);
    g.addedge(4, 3);
    g.addedge(1, 3);
    g.addedge(2, 3);
    g.addedge(2, 3);

    unordered_map<int, bool> visited;
    g.dfs(0, visited);

    return 0;
}
