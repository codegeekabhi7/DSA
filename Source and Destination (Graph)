#include <iostream>
#include <list>
#include <unordered_map>
#include <queue>
using namespace std;

template <typename T>
class graph {
  unordered_map<T, list<T>> h;

public:
  void addedge(T u, T v, bool bidir = true) {
    h[u].push_back(v);
    if (bidir) {
      h[v].push_back(u);
    }
  }

  void printgraph() {
    for (auto x : h) {
      cout << x.first << "-->";
      for (auto p : x.second) {
        cout << p << ", ";
      }
      cout << endl;
    }

  }

  void src_to_dist_path(T src, T dest) {
    queue<T> q;
    unordered_map<T, bool> visited;
    unordered_map<T, int> distance;
    unordered_map<T, T> parent;

    parent[src] = src;
    distance[src] = 0;

    q.push(src);
    visited[src] = true;

    while (!q.empty()) {
      T p = q.front();
      q.pop();

      for (T x : h[p]) {
        if (!visited[x]) {
          q.push(x);
          visited[x] = true;
          distance[x] = distance[p] + 1;
          parent[x] = p;
        }
      }
    }

    if (visited[dest]) {
      // Print the shortest path from source to destination
      T temp = dest;
      while (temp != src) {
        cout << temp << "<--";
        temp = parent[temp];
      }
      cout << src << endl;
    } else {
      cout << "No path found from " << src << " to " << dest << endl;
    }
  }
};

int main() {
  graph<string> g;
  g.addedge("trump", "modi", true);
  g.addedge("putin", "trump");
  g.addedge("putin", "modi");
  g.addedge("putin", "pope");
  g.addedge("prabhu", "modi");
  g.addedge("modi", "yogi", true);
  g.addedge("yogi", "prabhu");

  g.src_to_dist_path("trump", "yogi");

  return 0;
}
