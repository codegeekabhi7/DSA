#include <iostream>
#include <unordered_map>
#include <list>
#include <string>
using namespace std;

class TrieNode {
public:
    char ch;
    bool isTerminal;
    unordered_map<char, TrieNode*> children;

    TrieNode(char c) : ch(c), isTerminal(false) {}
};

class Trie {
private:
    TrieNode* root;

public:
    Trie() {
        root = new TrieNode('\0');
    }

    void insert(const string& word) {
        TrieNode* current = root;
        for (char c : word) {
            if (current->children.find(c) == current->children.end()) {
                current->children[c] = new TrieNode(c);
            }
            current = current->children[c];
        }
        current->isTerminal = true;
    }

    bool search(const string& word) {
        TrieNode* current = root;
        for (char c : word) {
            if (current->children.find(c) == current->children.end()) {
                return false;
            }
            current = current->children[c];
        }
        return current->isTerminal;
    }
};

int main() {
    Trie t;
   t.insert("hello");

    return 0;
}
