#include <iostream>
#include <vector>

std::vector<int> memo(100, -1); // Initialize a memoization table

int fibonacci(int n) {
    if (n <= 1) {
        return n;
    }

    // Check if we've already calculated fibonacci(n)
    if (memo[n] != -1) {
        return memo[n];
    }

    // Calculate fibonacci(n) and store it in the memoization table
    memo[n] = fibonacci(n - 1) + fibonacci(n - 2);
    return memo[n];
}

int main() {
    int n = 10;
    std::cout << "Fibonacci of " << n << " is " << fibonacci(n) << std::endl;
    return 0;
}



//TOP DOWN 

#include <iostream>
#include <vector>

std::vector<int> memo(100, -1); // Initialize a memoization table

int fibonacciTopDown(int n) {
    if (n <= 1) {
        return n;
    }

    // Check if we've already calculated fibonacci(n)
    if (memo[n] != -1) {
        return memo[n];
    }

    // Calculate fibonacci(n) and store it in the memoization table
    memo[n] = fibonacciTopDown(n - 1) + fibonacciTopDown(n - 2);
    return memo[n];
}

int main() {
    int n = 10;
    std::cout << "Fibonacci of " << n << " (Top-Down) is " << fibonacciTopDown(n) << std::endl;
    return 0;
}


//BOTTOM UP

#include <iostream>

int fibonacciBottomUp(int n) {
    if (n <= 1) {
        return n;
    }

    int prev1 = 0;
    int prev2 = 1;
    int current;

    for (int i = 2; i <= n; ++i) {
        current = prev1 + prev2;
        prev1 = prev2;
        prev2 = current;
    }

    return current;
}

int main() {
    int n = 10;
    std::cout << "Fibonacci of " << n << " (Bottom-Up) is " << fibonacciBottomUp(n) << std::endl;
    return 0;
}

