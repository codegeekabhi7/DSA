#include <iostream>

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

// Function to reverse a linked list
ListNode* reverseList(ListNode* head) {
    ListNode* prev = nullptr;
    while (head != nullptr) {
        ListNode* nextNode = head->next;
        head->next = prev;
        prev = head;
        head = nextNode;
    }
    return prev;
}

// Function to check if a linked list is a palindrome
bool isPalindrome(ListNode* head) {
    if (!head || !head->next) {
        return true; // Empty or single-node list is a palindrome
    }

    ListNode* slow = head;
    ListNode* fast = head;

    // Find the midpoint of the linked list
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }

    // Reverse the second half
    ListNode* secondHalf = reverseList(slow);

    // Compare the first half with the reversed second half
    while (secondHalf) {
        if (head->val != secondHalf->val) {
            return false; // Not a palindrome
        }
        head = head->next;
        secondHalf = secondHalf->next;
    }

    return true; // Linked list is a palindrome
}

int main() {
    // Create a linked list (1 -> 2 -> 2 -> 1)
    ListNode* head = new ListNode(1);
    head->next = new ListNode(2);
    head->next->next = new ListNode(2);
    head->next->next->next = new ListNode(1);

    if (isPalindrome(head)) {
        std::cout << "It's a palindrome." << std::endl;
    } else {
        std::cout << "It's not a palindrome." << std::endl;
    }

    return 0;
}
