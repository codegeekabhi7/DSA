#include <iostream>
#include <queue>
#include <climits>
using namespace std;

class MyStack {
    queue<int> q1;
    queue<int> q2;

public:
    void push(int d) {
        if (q1.empty() && q2.empty()) {
            q1.push(d);
        } else if (!q1.empty() && q2.empty()) {
            q1.push(d);
        } else {
            q2.push(d);
        }
    }

    void pop() {
        if (!q1.empty() && q2.empty()) {
            while (q1.size() > 1) {
                q2.push(q1.front());
                q1.pop();
            }
            q1.pop();
        } else if (q1.empty() && !q2.empty()) {
            while (q2.size() > 1) {
                q1.push(q2.front());
                q2.pop();
            }
            q2.pop();
        }
    }

    int top() {
        int x = INT_MIN;

        if (!q1.empty() && q2.empty()) {
            while (q1.size() > 1) {
                q2.push(q1.front());
                q1.pop();
            }
            x = q1.front();
        } else if (q1.empty() && !q2.empty()) {
            while (q2.size() > 1) {
                q1.push(q2.front());
                q2.pop();
            }
            x = q2.front();
        }

        return x;
    }

    bool empty() {
        return q1.empty() && q2.empty();
    }

    int size() {
        return q1.size() + q2.size();
    }
};

int main() {
    MyStack s;

    s.push(5);
    s.push(67);
    s.push(47);
    s.push(62);
    s.push(90);

    s.pop();
    s.push(79);

    while (!s.empty()) {
        cout << s.top() << " ";
        s.pop();
    }

    return 0;
}
