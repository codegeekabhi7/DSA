#include <iostream>
#include <list>
#include <unordered_map>
#include <queue>
using namespace std;

template <typename T>
class graph {
  unordered_map<T, list<T>> h;

public:
  void addedge(T u, T v, bool bidir = false) {
    h[u].push_back(v);
    if (bidir) {
      h[v].push_back(u);
    }
  }

  void printgraph() {
    for (auto x : h) {
      cout << x.first << "-->";
      for (auto p : x.second) {
        cout << p << ", ";
      }
      cout << endl;
    }
  }

  void src_to_dist_path(T src, T dest) {
    queue<T> q;
    unordered_map<T, bool> visited;
    unordered_map<T, int> distance;
    unordered_map<T, T> parent;

    parent[src] = src;
    distance[src] = 0;

    q.push(src);
    visited[src] = true;

    while (!q.empty()) {
      T p = q.front();
      q.pop();

      for (T x : h[p]) {
        if (!visited[x]) {
          q.push(x);
          visited[x] = true;
          distance[x] = distance[p] + 1;
          parent[x] = p;
        }
      }
    }

    if (visited[dest]) {
      // Print the shortest path from source to destination
      T temp = dest;
      while (temp != src) {
        cout << temp << "<--";
        temp = parent[temp];
      }
      cout << src << endl;
    } else {
      cout << "No path found from " << src << " to " << dest << endl;
    }
  }
};

int main() {
  graph<int> g;
  int board[50] = {0};
  board[2] = 13; // how much added in 2 to reach 15 through stairs is 13
  board[5] = 2;
  board[9] = 18;
  board[17] = -13;
  board[18] = 11;
  board[20] = -14;
  board[24] = -8;
  board[25] = -10;
  board[32] = -2;
  board[34] = -32;

  for (int sv = 0; sv < 36; sv++) { // start value - sv
    for (int dice = 1; dice <= 6; dice++) {
      int fv = sv + dice;

      // Adjust the position based on the board configuration
      fv += board[fv];

      g.addedge(sv, fv);
    }
  }

  g.src_to_dist_path(0, 36);

  return 0;
}
